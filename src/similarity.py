from operator import itemgetter


class SimilarityScore:

    def __init__(self, mutual_followings: dict, live_uid_total_followers: dict, num_collected: int, n_best: int = 10) -> None:
        self.mutual_followings = mutual_followings
        self.live_uid_total_followers = live_uid_total_followers
        self.sampled_count = num_collected
        self.n_best = n_best


    def __call__(self, n_best=10, ranked=True):
        self.n_best = n_best or self.n_best
        if ranked:
            return self.ranked_sim_scores
        else:
            return self.sim_scores


    @property
    def sum_mutual_followings(self):
        return sum(self.mutual_followings.values())


    @property
    def sim_scores(self) -> dict:
        similarity_scores = {}
        for uid, tot_folls in self.live_uid_total_followers.items():
            similarity_scores.update(
                {uid: self.sim(self.mutual_followings.get(uid, -1), tot_folls)})

        return similarity_scores


    @property
    def ranked_sim_scores(self) -> dict:
        ranked_scores = sorted(self.sim_scores.items(), key=itemgetter(1), reverse=True)
        if self.n_best is None:
            return dict(ranked_scores)
        else:
            n_best = min(self.n_best, len(self.sim_scores))
            return dict(ranked_scores[:n_best])


    @staticmethod
    def sim(uid_mutual_count: int, live_uid_total_followers: int):
        raise NotImplementedError




class SorensenDiceSim(SimilarityScore):

    def sim(self, uid_mutual_count: int, live_uid_total_followers: int) -> float:
        result = -1
        if 0 < self.sampled_count + live_uid_total_followers:
            result = (2 * uid_mutual_count) / (self.sampled_count + live_uid_total_followers)

        return result



class JaccardSim(SimilarityScore):

    def sim(self, uid_mutual_count: int, live_uid_total_followers: int) -> float:
        result = -1
        if 0 < uid_mutual_count < self.sampled_count + live_uid_total_followers:
            result = uid_mutual_count / (self.sampled_count + live_uid_total_followers - uid_mutual_count)

        return result



def main():
    mutual_following_counts = {'147980059': 188, '44445592': 33, '110690086': 25, '19571641': 21, '36769016': 21, '60056333': 21, '26490481': 17, '71092938': 17, '37402112': 16, '17337557': 15, '217377982': 14, '32140000': 14, '15564828': 13, '82524912': 13, '41245072': 12, '38594688': 12, '2158531': 12, '137512364': 12, '125387632': 11, '29829912': 11, '435049951': 10, '26261471': 10, '38718052': 9, '45680135': 9, '44424631': 9, '23220337': 9, '94875296': 9, '135052907': 8, '133220545': 8, '81687332': 8, '197886470': 8, '39298218': 8, '88946548': 8, '83080855': 8, '127651530': 7, '23161357': 7, '84110474': 7, '55125740': 7, '19070311': 7, '96879284': 6, '527115020': 6, '51496027': 6, '26610234': 6, '105533253': 6, '26991127': 6, '69588825': 6, '189755167': 6, '56649026': 6, '31106024': 6, '51929371': 6, '4329841': 6, '65171890': 5, '198815529': 5, '59635827': 5, '400471461': 5, '151920918': 5, '30011711': 5, '105458682': 5, '26301881': 5, '117379932': 5, '120244187': 5, '30417073': 5, '8818585': 5, '70661496': 5, '181224914': 5, '415954300': 5, '74027345': 5, '108540173': 5, '28481422': 5, '76508554': 5, '196413243': 5, '76055616': 5, '122101897': 5, '214560121': 5, '166279350': 5, '23155607': 5, '39158791': 5, '60218498': 5, '233300375': 5, '116617280': 5, '124604785': 5, '123484627': 5, '115955415': 5, '29183589': 4, '96940137': 4, '55937299': 4, '131986952': 4, '147927227': 4, '415068073': 4, '69906737': 4, '51858842': 4, '15310631': 4, '51533859': 4, '39724467': 4, '44578737': 4, '78556622': 4, '451544676': 4, '66983298': 4, '193270950': 4, '198182340': 4, '37516578': 4, '110176631': 4, '108005221': 4, '31239503': 4, '54706574': 4, '138888048': 4, '409624608': 4, '43338097': 4, '54041313': 4, '26929683': 4, '94773952': 4, '45382480': 4, '129372278': 4, '48079936': 4, '169188075': 4, '167189231': 4, '57025612': 4, '42776357': 4, '26903378': 4, '29795919': 4, '59980349': 4, '127506955': 4, '63532168': 4, '84752541': 4, '447330144': 4, '116885541': 4, '135246610': 4, '159736397': 4, '13240194': 4, '216155717': 4, '134651621': 4, '90020006': 4, '211256106': 4, '23735582': 4, '41314239': 4, '2982838': 4, '74634650': 4, '148879845': 4, '134413006': 4, '220904284': 3, '64461192': 3, '249949357': 3, '142199256': 3, '85581832': 3, '97300459': 3, '93518952': 3, '43126328': 3, '77878104': 3, '24057992': 3, '122320848': 3, '90222378': 3, '129342719': 3, '103356732': 3, '516174615': 3, '524114827': 3, '247324435': 3, '213883089': 3, '435458040': 3, '233447503': 3, '454206924': 3, '219002088': 3, '129961038': 3, '208082056': 3, '76364586': 3, '88547576': 3, '51270104': 3, '22859264': 3, '16764225': 3, '66272442': 3, '200020342': 3, '40580009': 3, '151748592': 3, '47606906': 3, '106177477': 3, '250673065': 3, '94600558': 3, '40619591': 3, '22253819': 3, '24538518': 3, '42665223': 3, '26946000': 3, '24991333': 3, '128149102': 3, '26551727': 3, '30777889': 3, '21442544': 3, '238655455': 3, '93839219': 3, '32882103': 3, '25681094': 3, '127550308': 3, '69450980': 3, '213104821': 3, '22916751': 3, '37121843': 3, '29733529': 3, '40397064': 3, '38607298': 3, '165794626': 3, '247289633': 3, '111086450': 3, '136957462': 3, '96771342': 3, '67509214': 3, '67802451': 3, '421838340': 3, '78417977': 3, '547023420': 3, '156510692': 3, '212124784': 3, '147813773': 3, '27942990': 3, '416247481': 3, '409824672': 3, '55712014': 3, '502430815': 3, '95676405': 3, '163159943': 3, '30281925': 3, '74857016': 3, '532716445': 3, '80352893': 3, '118786264': 3, '24124090': 3, '407492718': 3, '93215947': 3, '41657539': 3, '1423946': 3, '21130533': 3, '450196577': 3, '13220401': 3, '119677212': 3, '12335408': 3, '8272681': 3, '117083340': 3, '182100060': 3, '126162810': 3, '88398526': 3, '88342252': 3, '100372176': 3, '9679595': 3, '44739705': 3, '410330426': 3, '169467185': 3, '114582774': 3, '253222128': 3, '104919208': 3, '77574036': 3, '135262775': 3, '187786161': 3, '86952077': 3, '185496299': 3, '51359111': 3, '260722430': 3, '23822990': 3, '186394988': 3, '224145872': 3, '89336432': 3, '99591839': 3, '27121969': 3, '31582795': 3, '5690948': 3, '54525106': 3, '79615025': 3, '151145128': 3, '26348106': 3, '501281': 3, '45892288': 3, '156037856': 3, '83402203': 3, '114856888': 3, '27645199': 3, '153027216': 3, '154526718': 3, '146612437': 3, '189290002': 3, '216498562': 3, '148006994': 3, '100484450': 3, '57717183': 3, '114476906': 3, '138094916': 3, '156567621': 3, '71166086': 3, '100242906': 3, '42297683': 3, '111298451': 3, '44158279': 3, '450415386': 3, '82641738': 3, '46918089': 3, '141840974': 3, '62347369': 3, '40057591': 3, '185229342': 2, '103952647': 2, '145002817': 2, '430551896': 2, '60047423': 2, '111959073': 2, '967058': 2}
    uid_total_folls = {'29829912': 4077079, '31239503': 3950964, '76364586': 574, '133220545': 180591, '189755167': 537630, '26610234': 1257541, '435049951': 33157, '409624608': 141191, '26991127': 930841, '25681094': 79785, '39158791': 732321, '56649026': 529032, '100372176': 77486, '77574036': 122401, '22916751': 472622, '95676405': 59465, '45680135': 70312, '36769016': 5125469, '40057591': 29316, '100242906': 9219, '54525106': 43623, '62347369': 62620, '115955415': 40458, '114582774': 9479, '64461192': 39792, '415068073': 38842, '23220337': 495797, '105458682': 1508247, '1423946': 290236, '23735582': 673316, '39298218': 4477245, '51929371': 334848, '135262775': 248540, '128149102': 218620, '84752541': 1676613, '27121969': 918805, '181224914': 1031588, '211256106': 49599, '146612437': 17810, '31582795': 558343}
    num_collected = 207

    print('Sorensen-Dice')
    sd_sims = SorensenDiceSim(mutual_following_counts, uid_total_folls, num_collected)
    print(f'  All Unsorted Sims: \n\t{sd_sims.sim_scores}')
    print(f'  N-best Ranked Sims: \n\t{sd_sims(n_best=None)}\n')

    print('Jaccard')
    j_sims = JaccardSim(mutual_following_counts, uid_total_folls, num_collected)
    print(f'  All Unsorted Sims: \n\t{j_sims.sim_scores}')
    print(f'  N-best Ranked Sims: \n\t{j_sims(n_best=20)}\n')

    def not_same():
        not_same_idxs = []
        lst_sd_ranked_sims = list(sd_sims(n_best=20).keys())
        lst_j_ranked_sims = list(j_sims(n_best=20).keys())
        for idx in range(len(lst_j_ranked_sims)):
            if lst_j_ranked_sims[idx] != lst_sd_ranked_sims[idx]:
                not_same_idxs.append(idx)
        return not_same_idxs


    print(f'Not same idxs:  {not_same()}')
    print(f'Sorted Mutual Followings\n  {mutual_following_counts}')
    print(f'Sorted Live Uid Total Followers\n  {dict(sorted(uid_total_folls.items(), key=itemgetter(1), reverse=True))}')

    pass


if __name__ == "__main__":
    main()
